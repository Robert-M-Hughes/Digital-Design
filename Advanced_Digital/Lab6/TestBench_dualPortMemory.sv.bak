module TestBench_dualPortMemory();
	
	// Create clock signals
	logic clk = 1'b0;
	always #50 clk <= ~clk;
	
	// FSM inputs
	logic enable;
	logic [2:0] address;
	logic [14:0] writeData;
	
	// FSM inouts
	logic [14:0] readData;
	
	
	task TestCase(logic inEnable, logic [3:0] inAddress, logic [14:0] inWriteData, logic [14:0] expectedReadData, logic readDataIsHighZ);			
		@(negedge clk);
			enable <= inEnable;
			address <= inAddress;
			writeData <= inWriteData;
		@(posedge clk);
			tc: assert(readData == expectedReadData || readDataIsHighZ == 1'b1)
					$display("PASS: enable(%b) address(%d) writeData(%d) => readData(%d)", enable, address, writeData, readData);
				else
					$display("FAIL: enable(%b) address(%d) writeData(%d) => readData(%d) | Expected readData(%d)", enable, address, writeData, readData, expectedReadData);
	endtask
	
	// Connect device(s) to test
	dualPortMemory memory(.clk(clk), .enA(enable), .addrA(address), .dataA(writeData), .qA(readData));
	
	initial begin
	
		
		// Write to each 
		TestCase(1, 0, 10,  0, 1);
		TestCase(1, 0, 10,  0, 1);
		TestCase(1, 0, 10, 10, 0);
		TestCase(1, 1, 11,  0, 1);
		TestCase(1, 1, 11,  0, 1);
		TestCase(1, 1, 11, 11, 0);
		TestCase(1, 2, 12,  0, 1);
		TestCase(1, 2, 12,  0, 1);
		TestCase(1, 2, 12, 12, 0);
		TestCase(1, 3, 13,  0, 1);
		TestCase(1, 3, 13,  0, 1);
		TestCase(1, 3, 13, 13, 0);
		TestCase(1, 4, 14,  0, 1);
		TestCase(1, 4, 14,  0, 1);
		TestCase(1, 4, 14, 14, 0);
		TestCase(1, 5, 15,  0, 1);
		TestCase(1, 5, 15,  0, 1);
		TestCase(1, 5, 15, 15, 0);
		TestCase(1, 6, 16,  0, 1);
		TestCase(1, 6, 16,  0, 1);
		TestCase(1, 6, 16, 16, 0);
		TestCase(1, 7, 17,  0, 1);
		TestCase(1, 7, 17,  0, 1);
		TestCase(1, 7, 17, 17, 0);
		
		// Write blocked by en
		TestCase(0, 0, 20, 17, 0);
		TestCase(0, 0, 20, 10, 0);
		TestCase(0, 1, 20, 10, 0);
		TestCase(0, 1, 20, 11, 0);
		TestCase(0, 2, 20, 11, 0);
		TestCase(0, 2, 20, 12, 0);
		TestCase(0, 3, 20, 12, 0);
		TestCase(0, 3, 20, 13, 0);
		TestCase(0, 4, 20, 13, 0);
		TestCase(0, 4, 20, 14, 0);
		TestCase(0, 5, 20, 14, 0);
		TestCase(0, 5, 20, 15, 0);
		TestCase(0, 6, 20, 15, 0);
		TestCase(0, 6, 20, 16, 0);
		TestCase(0, 7, 20, 16, 0);
		TestCase(0, 7, 20, 17, 0);
		TestCase(0, 7, 20, 17, 0);
		
		$display("Done!");
	end
	
endmodule