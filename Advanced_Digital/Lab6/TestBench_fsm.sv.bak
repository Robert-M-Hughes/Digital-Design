module TestBench_fsm();
	
	// Create clock signals
	logic clk = 1'b0;
	always #50 clk <= ~clk;
	
	// FSM inputs
	logic mode, readWrite;
	logic [14:0] writeData;
	
	// FSM inouts
	logic full, empty;
	logic [14:0] readData;
	
	
	task TestCase(logic inMode, logic inReadWrite, logic [14:0] inWriteData, logic expectedFull, logic expectedEmpty, logic [14:0] expectedReadData, logic readDataIsHighZ);			
		@(negedge clk);
			mode <= inMode;
			readWrite <= inReadWrite;
			writeData <= inWriteData;
		@(posedge clk);
			tc: assert((full == expectedFull && empty == expectedEmpty && readData == expectedReadData) || readDataIsHighZ == 1'b1)
					$display("PASS: mode(%b) readWrite(%b) writeData(%d) => full(%b) empty(%b) readData(%d)", mode, readWrite, writeData, full, empty, readData);
				else
					$display("FAIL: mode(%b) readWrite(%b) writeData(%d) => full(%b) empty(%b) readData(%d) | Expected full(%b) empty(%b) readData(%d)", mode, readWrite, writeData, full, empty, readData, expectedFull, expectedEmpty, expectedReadData);
	endtask
	
	// Connect device(s) to test
	fsm fsm(.clk(clk), .mode(mode), .readWrite(readWrite), .writeData(writeData), .full(full), .empty(empty), .readData(readData));
	
	initial begin
		
		// Write to each 
		TestCase(1, 0, 32767, 0, 1,     0, 1);
		TestCase(1, 1, 32767, 0, 1,     0, 1);
		TestCase(1, 0, 32767, 0, 1,     0, 1);
		TestCase(1, 0, 32767, 0, 1,     0, 1);
		TestCase(1, 0, 32767, 0, 0, 32767, 0);
		
		TestCase(1, 0, 32766, 0, 0, 32767, 0);
		TestCase(1, 1, 32766, 0, 0, 32767, 0);
		TestCase(1, 0, 32766, 0, 0, 32767, 0);
		TestCase(1, 0, 32766, 0, 0, 32767, 0);
		TestCase(1, 0, 32766, 0, 0, 32767, 0);
		
		TestCase(1, 0, 32765, 0, 0, 32767, 0);
		TestCase(1, 1, 32765, 0, 0, 32767, 0);
		TestCase(1, 0, 32765, 0, 0, 32767, 0);
		TestCase(1, 0, 32765, 0, 0, 32767, 0);
		TestCase(1, 0, 32765, 0, 0, 32767, 0);
		
		TestCase(1, 0, 32764, 0, 0, 32767, 0);
		TestCase(1, 1, 32764, 0, 0, 32767, 0);
		TestCase(1, 0, 32764, 0, 0, 32767, 0);
		TestCase(1, 0, 32764, 0, 0, 32767, 0);
		TestCase(1, 0, 32764, 0, 0, 32767, 0);
		
		TestCase(1, 0, 32763, 0, 0, 32767, 0);
		TestCase(1, 1, 32763, 0, 0, 32767, 0);
		TestCase(1, 0, 32763, 0, 0, 32767, 0);
		TestCase(1, 0, 32763, 0, 0, 32767, 0);
		TestCase(1, 0, 32763, 0, 0, 32767, 0);
		
		TestCase(1, 0, 32762, 0, 0, 32767, 0);
		TestCase(1, 1, 32762, 0, 0, 32767, 0);
		TestCase(1, 0, 32762, 0, 0, 32767, 0);
		TestCase(1, 0, 32762, 0, 0, 32767, 0);
		TestCase(1, 0, 32762, 0, 0, 32767, 0);
		
		TestCase(1, 0, 32761, 0, 0, 32767, 0);
		TestCase(1, 1, 32761, 0, 0, 32767, 0);
		TestCase(1, 0, 32761, 0, 0, 32767, 0);
		TestCase(1, 0, 32761, 0, 0, 32767, 0);
		TestCase(1, 0, 32761, 0, 0, 32767, 0);
		
		TestCase(1, 0, 32760, 0, 0, 32767, 0);
		TestCase(1, 1, 32760, 0, 0, 32767, 0);
		TestCase(1, 0, 32760, 0, 0, 32767, 0);
		TestCase(1, 0, 32760, 1, 0, 32767, 0);
		TestCase(1, 0, 32760, 1, 0, 32767, 0);
		
		// Read from each
		TestCase(0, 0, 00500, 1, 0, 32767, 0);
		TestCase(0, 1, 00500, 1, 0, 32767, 0);
		TestCase(0, 0, 00500, 1, 0, 32767, 0);
		TestCase(0, 0, 00500, 0, 0, 32767, 0);
		TestCase(0, 0, 00500, 0, 0, 32766, 0);
		
		TestCase(0, 1, 00500, 0, 0, 32766, 0);
		TestCase(0, 0, 00500, 0, 0, 32766, 0);
		TestCase(0, 0, 00500, 0, 0, 32766, 0);
		TestCase(0, 0, 00500, 0, 0, 32765, 0);
		
		TestCase(0, 1, 00500, 0, 0, 32765, 0);
		TestCase(0, 0, 00500, 0, 0, 32765, 0);
		TestCase(0, 0, 00500, 0, 0, 32765, 0);
		TestCase(0, 0, 00500, 0, 0, 32764, 0);
		
		TestCase(0, 1, 00500, 0, 0, 32764, 0);
		TestCase(0, 0, 00500, 0, 0, 32764, 0);
		TestCase(0, 0, 00500, 0, 0, 32764, 0);
		TestCase(0, 0, 00500, 0, 0, 32763, 0);
		
		TestCase(0, 1, 00500, 0, 0, 32763, 0);
		TestCase(0, 0, 00500, 0, 0, 32763, 0);
		TestCase(0, 0, 00500, 0, 0, 32763, 0);
		TestCase(0, 0, 00500, 0, 0, 32762, 0);
		
		TestCase(0, 1, 00500, 0, 0, 32762, 0);
		TestCase(0, 0, 00500, 0, 0, 32762, 0);
		TestCase(0, 0, 00500, 0, 0, 32762, 0);
		TestCase(0, 0, 00500, 0, 0, 32761, 0);
		
		TestCase(0, 1, 00500, 0, 0, 32761, 0);
		TestCase(0, 0, 00500, 0, 0, 32761, 0);
		TestCase(0, 0, 00500, 0, 0, 32761, 0);
		TestCase(0, 0, 00500, 0, 0, 32760, 0);

		$display("Done!");
	end
	
endmodule